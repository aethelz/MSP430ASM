#include "msp430.h"                     ; #define controlled include file

CR EQU 0xD ;Carriage Return ASCII symbol
#define TEMP R15

#include "VECTORS.asm"
#include "RAM.asm" ;RAM Allocations file       

;= Dead End for Subroutines & Handlers ==================================
  ORG 0xC000 ;Everything below goes into Flash - that is C000h
#include "MACROS.asm"
#include "UART_BufferTX.asm" ;TX buffer subroutine
#include "EEPROM_Start.asm" ;EEPROM Initialization routine
#include "TX_Handler.asm"
#include "RX_Handler.asm"

EEWR_BufPush:
	PUSH SR
	DINT ; Disable interrupts
	NOP ;necessary command before non-interruptible sequence
	PUSH TEMP
	
	MOV.B &EEWRITE_POINTER,TEMP ;move content of OUT_PTR_E to WRITE INCREMENTA STORAGE REGISTER
	ADD #PAGEWRITE_DATA,TEMP ;add WRITE INCREMENTA with OUT_buff to obtain current write position WRITEPOINT
	;adressing mode is immediate
	MOV.B &EEWR_DATA,0(TEMP) ;saving DATA into incremented buffer in RAM (WRITEPOINT)
	INC.B EEWRITE_POINTER ;incrementing pointer end
	CMP.B #64,&EEWRITE_POINTER ;checking whether the end of the buffer is reached
	JEQ EEWR_F
	JMP EEWR_OUT
	
EEWR_F: MOV.B #1,&EEWR_FULL ;Buffer overflow, writing 1, 1 is an overflow flag

EEWR_OUT: POP TEMP
	POP SR ; Interrupts enable
	RET

STRING DC8 '* MSP430 *'
;= Dead End for Subroutines & Handlers ==================================

#include "INIT.asm"

main: 
;#include "welcome_msg.asm"

	CLR R7
LBL1: INC R7
	EEWR_PUSH R7
	TST.B &EEWR_FULL
	JZ LBL1
	EEPROM_PAGEWRITE #0x1E40
	CALL #EEPROM_START

EEPROM_SEQREAD #0x1E00,#160
	CALL #EEPROM_START

        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        END
